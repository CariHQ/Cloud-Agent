openapi: 3.0.0
servers:
  - url: 'http://localhost'
info:
  description: >-
    This is an implementation of the Hyperledger Indy Agency Implementation
    which connects mobile clients / edge agents through Google Firebase. 
  version: 0.0.1
  title: IDChain Agency
  termsOfService: 'https://git.snet.tu-berlin.de/blockchain/identitychain/agency'
  contact:
    email: bersant.deva@tu-berlin.de
tags:
  - name: message
    description: Send messages to connected agents
  - name: registration
    description: register your did with a temporary firebase registration token
  - name: user
    description: Operations about user
paths:
  /message:
    post:
      summary: ''
      description: ''
      parameters: []
      operationId: send new message to recipient
      responses:
        default:
          description: Default response
      requestBody:
        content:
          '*/*':
            required: false
            schema: {}
        description: |-
          { "id": "reciepientDid", 
            "type": "typeOfMessage",
            "message": "encrypted message"
          }
      callbacks: {}
  /user:
    post:
      summary: ''
      description: ''
      parameters: []
      operationId: register new user
      responses:
        default:
          description: Default response
    get:
      summary: ''
      description: ''
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      operationId: get user
      responses:
        default:
          description: Default response
    put:
      summary: ''
      description: ''
      parameters: []
      operationId: ''
      responses:
        default:
          description: Default response
externalDocs:
  description: ''
  url: 'https://git.snet.tu-berlin.de/blockchain/identitychain/agency/README'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Category
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Tag
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
        application/xml:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                username:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                userStatus:
                  type: integer
                  format: int32
                  description: User Status
              xml:
                name: User
      description: List of user object
      required: true
  links: {}
  callbacks: {}
security: []
